// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  Profile       Profile?
  reviews       Review[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String     @id @default(cuid())
  title       String
  description String?
  price       Float
  image       String
  category    String     @default("Uncategorized")
  reviews     Review[]
  cartItems   CartItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Profile {
  id     String @id @default(cuid())
  bio    String?
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Category {
  id        String     @id @default(cuid())
  name      String
  blogPosts BlogPost[]
}

model BlogPost {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String?
  content     String?
  coverImage  String?
  publishedAt DateTime @default(now())
  authorId    String
  categoryId  String?
  tags        String?
  featured    Boolean  @default(false)
  readingTime String?

  author     Author     @relation(fields: [authorId], references: [id])
  category   Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Author {
  id          String   @id @default(cuid())
  name        String
  image       String?
  role        String?
  blogPosts BlogPost[]
}

model Order {
  id              String   @id @default(cuid())
  userId          String
  stripeSessionId String?  @unique
  amount          Float
  status          String
  shippingAddress String?
  paymentMethod   String?
  customerEmail   String?
  customerName    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}
